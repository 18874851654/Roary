{"name":"Pan Genome Pipeline","tagline":"","body":"# Abstract\r\n**By Andrew Page based on version 3.3.3 (2-Oct-2015)**\r\n\r\nRoary is a high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome. Using a standard desktop PC, it can analyse datasets with thousands of samples, something which is computationally infeasible with existing methods, without compromising the quality of the results. 128 samples can be analysed in under 1 hour using 1 GB of RAM and a single processor. To perform this analysis using existing methods would take weeks and hundreds of GB of RAM. Roary is not intended for meta-genomics or for comparing extremely diverse sets of genomes. \r\n\r\n# Citation and further details of the method\r\nAndrew J. Page, Carla A. Cummins, Martin Hunt, Vanessa K. Wong, Sandra Reuter, Matthew T. G. Holden, Maria Fookes, Daniel Falush, Jacqueline A. Keane, Julian Parkhill (2015), \"Roary: Rapid large-scale prokaryote pan genome analysis\", Bioinformatics, [doi:10.1093/bioinformatics/btv421](http://bioinformatics.oxfordjournals.org/content/early/2015/08/05/bioinformatics.btv421)\r\n\r\n# Installation instructions\r\n[Details on how to install Roary](https://github.com/sanger-pathogens/Roary/blob/master/README.md).\r\n\r\n# Input files\r\nRoary takes GFF3 files as input. They must contain the nucleotide sequence at the end of the file.\r\n\r\n## Input files from Prokka\r\nAll GFF3 files created by Prokka are valid with Roary and this is the recommended way of generating the input files.  Each input file should have a unique prefix for the gene IDs (--prefix) to make it easier for you to identify where genes came from.\r\n\r\n## Input files from GenBank\r\nOn NCBI's website, GFF3 files only contain annotation and not the nucleotide sequence so cannot be used. You need to download the GenBank files plus nucleotide sequence and convert them. When downloading, click on the _show sequence_ option, _Update View_ then _Send_ to a _File_ of type _GenBank_. You can then use the Bio::Perl script _bp_genbank2gff3.pl_ to convert to GFF3. Just be aware that mixing different gene prediction methods and annotation pipelines can give noisier results.\r\n\r\n## Input files from GenBank draft WGS\r\nInstall Bio-RetrieveAssemblies which will allow you to download draft WGS assemblies from GenBank. \r\n\r\n    sudo cpanm -f Bio::RetrieveAssemblies\r\n\r\nTo download all Salmonella typhi annotated assemblies as GFF3 files:\r\n\r\n    retrieve_assemblies -a -f gff typhi\r\n\r\n## Software usage\r\nTo run the software and create a pan genome you use the _roary_ script. It takes in GFF files and outputs various analysis.  \r\n\r\n### roary\r\n\r\n```\r\nUsage:   roary [options] *.gff\r\n\r\nOptions: -p INT    number of threads [1]\r\n         -o STR    clusters output filename [clustered_proteins]\r\n         -f STR    output directory [.]\r\n         -e        create a multiFASTA alignment of core genes using PRANK\r\n         -n        fast core gene alignment with MAFFT, use with -e\r\n         -i        minimum percentage identity for blastp [95]\r\n         -cd FLOAT percentage of isolates a gene must be in to be core [99]\r\n         -z        dont delete intermediate files\r\n         -t INT    translation table [11]\r\n         -v        verbose output to STDOUT\r\n         -y        add gene inference information to spreadsheet\r\n         -g INT    maximum number of clusters [50000]\r\n         -qc       generate QC report with Kraken\r\n         -k STR    path to Kraken database for QC, use with -qc\r\n         -w        print version and exit\r\n         -a        check dependencies and exit\r\n         -h        this help message\r\n```\r\n\r\nDefault usage – create a pan genome without a core alignment\r\n\r\n    roary *.gff\r\n\r\nQuickly generate a core gene alignment using 8 threads:\r\n\r\n    roary -e --mafft -p 8 *.gff\r\n\r\nSave results to a different directory:\r\n\r\n    roary –f output_dir *.gff\r\n\r\nChange the minimum blastp percentage identity. Its not advised to go below 90% unless you know what your doing.\r\n\r\n    roary –i 90 *.gff\r\n\r\nRun a QC check to see if all the samples are what you think they are\r\n\r\n    roary –qc –k /path/to/kraken/db *.gff\r\n\r\nCheck that the software is installed correctly.\r\n\r\n    roary -a\r\n\r\n### query_pan_genome\r\nPerform set operations on the pan genome to see the gene differences between groups of isolates.\r\n\r\n```\r\nOptions: -g STR    groups filename [clustered_proteins]\r\n         -a STR    action (union/intersection/complement/gene_multifasta/difference) [union]\r\n         -c FLOAT  percentage of isolates a gene must be in to be core [99]\r\n         -o STR    output filename [pan_genome_results]\r\n         -n STR    comma separated list of gene names for use with gene_multifasta action\r\n         -i STR    comma separated list of filenames, comparison set one\r\n         -t STR    comma separated list of filenames, comparison set two\r\n         -v        verbose output to STDOUT\r\n         -h        this help message\r\n```\r\n\r\nUnion of genes found in isolates\r\n\r\n    query_pan_genome -a union *.gff\r\n         \r\nIntersection of genes found in isolates (core genes)\r\n\r\n    query_pan_genome -a intersection *.gff\r\n         \r\nComplement of genes found in isolates (accessory genes)\r\n\r\n    query_pan_genome -a complement *.gff\r\n\r\nExtract the sequence of each gene listed and create multi-FASTA files\r\n\r\n    query_pan_genome -a gene_multifasta -n gryA,mecA,abc *.gff\r\n\r\nGene differences between sets of isolates\r\n\r\n    query_pan_genome -a difference --input_set_one 1.gff,2.gff --input_set_two 3.gff,4.gff,5.gff\r\n\r\n### iterative_cdhit\r\nIteratively cluster a set of proteins with CD-hit, lower the threshold each time and extracting core genes (1 per isolate) to another file, and remove them from the input proteins file.\r\n\r\n```\r\nOptions: -p INT   number of threads [1]\r\n         -m STR   output filename for combined proteins [_combined_files]\r\n         -n INT   number of isolates [1]\r\n         -c STR   cd-hit output filename [_clustered]\r\n         -f STR   output filename for filtered sequences [_clustered_filtered.fa]\r\n         -l FLOAT lower bound percentage identity [98.0]\r\n         -u FLOAT upper bound percentage identity [99.0]\r\n         -s FLOAT step size for percentage identity [0.5]\r\n         -v       verbose output to STDOUT\r\n         -h       this help message\r\n```\r\n\r\n### roary_plots.py \r\nThis contributed script by Marco Galardini is not installed by default but can be very useful. [Additional details can be found here in the repository](https://github.com/sanger-pathogens/Roary/tree/master/contrib/roary_plots).\r\nIt provides 3 figures, showing the tree compared to a matrix with the presence and absence of core and accessory genes. The next is an pie chart of the breakdown of genes and the number of isolate they are present in. And finally there is a graph with the frequency of genes versus the number of genomes.\r\n\r\n    roary_plots.py my_tree.tre gene_presence_absence.csv\r\n\r\n![Pan Genome Matrix](http://sanger-pathogens.github.io/Roary/images/pan_genome_matrix.png)\r\n\r\n![Pan Genome Pie](http://sanger-pathogens.github.io/Roary/images/pan_genome_pie.png)\r\n\r\n![Pan Genome Frequency](http://sanger-pathogens.github.io/Roary/images/pan_genome_freq.png)\r\n\r\n# Receipe for using Roary\r\n1. Annotate FASTA files with PROKKA\r\n2. Roary –e –mafft *.gff\r\n3. FastTree –nt –gtr core_gene_alignment.aln > my_tree.newick\r\n\r\n#Output files\r\n\r\n## summary_statistics.txt\r\nNumber of genes in the core and accessory. A text file with an overview of the genes and how frequently they occur in the input isolates. If the number of core genes is 0 it can indicate you have some contamination. Likewise if the total number of  genes is very high.\r\n![Summary Statistics](http://sanger-pathogens.github.io/Roary/images/summary_statistics.png)\r\n\r\n## gene_presence_absence.csv\r\nThe gene presence and absence spreadsheet lists each gene and which samples it is present in.  The view below shows how it looks in Excel. \r\n![Gene presence and absence](http://sanger-pathogens.github.io/Roary/images/gene_presence_and_absence.png)\r\n\r\nA. The gene name, which is the most frequently occurring gene name from the sequences in the cluster. If there is no gene name, then it is given a generic unique name _group_XXX_. \r\nB. A non unique gene name, where sequences with the same gene name have ended up in different groups. It might be because of split genes, or miss annotation.\r\nC. Functional annotation. The most frequently occurring functional annotation from the cluster is used.\r\nD. Number of isolates represented in the cluster.\r\nE. Number of sequences in the cluster.\r\nF. Average number of sequences per isolate. This is normally 1. If this is greater than 1 then there is over clustering and the paralogs couldn’t be split.\r\nG. Genome fragment, where there is evidence at the contig level that the genes are linked. \r\nH. Order within fragment, combined with the genome fragment this gives an indication of the order of genes within the graph. In Excel, sort on Column G and H.\r\nI. Accessory Fragment is where core genes are excluded and there is evidence at contig level that the genes are linked.\r\nJ. Accessory order with fragment, combined with the Accessory fragment this gives an indication of the order of genes within the accessory graph. In Excel, sort on columns I and J.\r\nK. Comments on the quality of the cluster. Miss predictions are noted, as are single genes on single contigs, which can be evidence of low level contamination.\r\nX. Presence and absence of genes in each sample, with the corresponding source Gene ID.\r\n\r\n## pan_genome_reference.fa\r\nThis is a FASTA file which contains a single representative nucleotide sequence from each of the clusters in the pan genome (core and accessory). The name of each sequence is the source sequence ID followed by the cluster it came from. This file can be of use for reference guided assembly, whole genome MLST or for mapping raw reads to it. \r\n\r\n## *.Rtab\r\nThere is an additional script called _create_pan_genome_plots.R_ which requires R and the ggplot2 library. It takes in the *.Rtab files and produces graphs on how the pan genome varies as genomes are added (in random orders).\r\n\r\n![Total Conserved Genes](http://sanger-pathogens.github.io/Roary/images/conserved_genes.png)\r\n![New Unique Genes](http://sanger-pathogens.github.io/Roary/images/new_genes.png)\r\n\r\n## accessory_binary_genes.fa.newick\r\nThis is a tree created using the binary presence and absence of accessory genes. It is in Newick format and can be viewed in FigTree. It is only a quick and dirty tree to roughly group isolates together based on their accessory genome and is in no way reliable other than to give a quick insight into the data. If you want a more accurate tree you need to use the core gene alignment as your starting point.\r\n\r\n## accessory_graph.dot\r\nA graph in DOT format of how genes are linked together at the contig level in the accessory genome.\r\n\r\n## core_accessory_graph.dot\r\nA graph in DOT format of how genes are linked together at the contig level in the pan genome.\r\n\r\n## clustered_proteins\r\nGroups file where each line lists the sequences in a cluster.\r\n\r\n## core_gene_alignment.aln\r\nIf you pass in the _-e_ parameter to roary, a multi-FASTA alignment of all of the core genes is created. By default it uses PRANK (Löytynoja, 2014) which performs a codon aware alignment. It is slow but accurate.  If you pass in _-e --mafft_ it will use MAFFT which performs a nucleotide alignment. It is very fast but less accurate. This can then be used as input to build a phylogenetic tree. To reduce the memory and run time, you can pre filter the alignment using [snp_sites](https://github.com/sanger-pathogens/snp_sites).\r\nJust be aware that recombination is not taken care of with this method.  \r\n\r\n# Software availability\r\nAll of the source code is available under the GNU GPL 3 open source license from:\r\nhttps://github.com/sanger-pathogens/Roary\r\n\r\n# Contact us\r\nIf you are having problems installing the software you should contact your local system administrator in the first instance as they will be best placed to assist you.  If you have any queries about Roary or wish to report any bugs please email roary@sanger.ac.uk.\r\n\r\n# FAQ\r\n## Strange errors\r\nCheck the dependencies with _roary -a_.  If theres something missing, then you’ll need to install it.\r\n\r\n## I got no core genes?\r\nUsually this means there is contamination, where one of your samples is from a different unrelated species.  If you have Kraken (Wood and Salzberg, 2014) installed, you can run a Kraken QC check with _—qc –k /path/to/kraken/db_. This will produce report which will list the top species for each sample.  Another quick way is to simply look at the size of your input files. If some are way too big or way too small, they might be a different species or partial assemblies. If assemblies are extremely fragmented (thousands of contigs), genes may be too fragmented to do anything with.\r\n\r\n## The core is a lot smaller than I expected?\r\nWith bacteria, the rule of thumb is that there are about 1,000 genes per million bases. If you have a 2 megabase genome and are getting a core of 200 genes, instead of closer to 2,000 genes, then there is a problem. The species could be too diverse, in which case you should lower the blastp percentage identity (-i 90). Just be aware that you can get anything to cluster with anything else if you set this value low enough, but the results will be complete rubbish. If your setting this below 70%, then your doing something wrong. Other causes are contamination from a different species, or very poor assemblies (too small, too fragmented), see _I got no core genes_. \r\n\r\n## No core alignment is produced and theres an error about too many clusters?\r\nBy default if there are more than 50,000 clusters, Roary will not create the core alignment. In virtually every case, having more than 50,000 clusters is a result of mixing different unrelated species and you should go back and QC your samples.  In some limited cases (e.g. E. coli) you can increase the maximum number of allowed clusters by using the _–g_ parameter (_-g 60000_).  More clusters will mean a longer running time, and a lot more RAM usage.\r\n\r\n## What tree building software do you recommend?\r\nRAxML (Stamatakis, 2014) is great, or if you need a quick and dirty tree try FastTree.\r\n\r\n## Theres some very long branches in my tree?\r\nIts likely you have recombination. Roary doesn’t take recombination into account, so you will have to use a different method such as Gubbins (Croucher et al., 2014). Or you might have contamination from two closely related strains.\r\n\r\n## Is there a server I can upload my data to and get a pan genome back?\r\nNo. One of the big selling points of Roary is that it can run on your own machine in a reasonable amount of time. Sending genomic data across borders is fraught with danger (and slow). For example, what if your private data gets accidentally publicly released, or you accidentally send data that is contaminated with Human reads (illegal without proper safeguards in many countries)? One possible alternative is to use http://wgsa.net if you wish to visualize your samples in the context of other published samples.\r\n\r\n## I have no knowledge of the command line or bioinformatics and have just spent $500,000 sequencing lots of bacteria. What do I do to get a pretty tree?\r\nHire a bioinformatician.\r\n\r\n## I haven’t done any QC on my sequencing data and the pan genome looks very strange?\r\ngarbage in = garbage out.\r\n\r\n## Will it work with Virus data?\r\nIn theory yes, just set the translation table to 1 (_-t 1_). I haven’t validated it so use at your own risk.\r\n\r\n## Will it work with Archaea?\r\nYes.\r\n\r\n## Will it work with Mitochondria?\r\nYes, just set the translation table to 4 (_-t 4_).\r\n\r\n## Will it work with Eukaryotes (e.g. Homo sapiens, Mus musculus)?\r\nNo.\r\n\r\n## Do you have plans for a Windows version?\r\nNo. Install Linux.\r\n\r\n## cdhit seg faults\r\nOld versions of cdhit have a bug, so you need to use at least version 4.6.1. The cdhit packages for Ubuntu 12.04 seem to be effected, so installing from the source is the only option.\r\n\r\n## Kraken installed via homebrew throws an error.\r\nTheres a bug and you'll need to install it from source on older versions of OSX (like Mountain Lion).\r\n\r\n## Why dont you bundle a Kraken database for the QC?\r\nIts massive (2.7GB currently) and changes as RefSeq is updated. The authors have prebuilt databases and details about how to make your own.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}